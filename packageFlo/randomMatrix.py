def randomMatrix(m,n): #returns a m x n list of pseudo random values between -0.5 and 0.5

    """
    Pseudo random number generator.

    This function returns a matrix (list in list) consisting of numbers(between -0.5 and 0.5) generated by
    the linear congruential generator (LCG) algorithm. This function always returns
    the same matrix for the same input.

    P.S. Since matrices and arrays are not built in Python functions we are using lists.
    Lists are of the form [x,y,z]. And we identify lists in a list as matrices, i.e.,
    [[2,4],[4,4],[2,2]] would be an example of a 3x2 matrix.


    Parameters:
    -----------
    m: int which is >0
        Number of rows of the pseudo random matrix.
    n: int which is >0
        Number of columns of the pseudo random matrix.

    Returns:
    --------
    list of legnth m where each element is a list containing n float numbers
        m x n "Matrix" in the sense above containing pseudo random float numbers.
    """

    #parameters for LCG algorithm, can be changed
    seed = 4 #starting value
    modulus = pow(2,16)+1 #modulus, random numbers are between 0 and modulus-1
    a=75 #mulitplier
    c=74 #increment

    rand = [] #initalize random list

    try: #Assert statements are meant as internal consistency check and can be removed for optimization, raise errors for erros that might occur during the intended use of the code

        if (isinstance(m, int) == 0) or (isinstance(n, int) == 0):
            raise TypeError('TypeError: random() needs 2 positive integers')

        if m <= 0 or n <= 0:
            raise ValueError('ValueError: random() needs 2 positive integers')

        for i in range(m): #compute m rows
            row = [] #initialize empty row
            for j in range(n): #compute n values in each row
                seed = (a*seed+c) % modulus #LCG algorithm
                row.append((seed/modulus)-0.5) #add value to row, divided by modulus to get number between 0 and 1 and subtract 0.5
            rand.append(row) #add row to list

    except TypeError as te: #this is executed for all TypeErrors in the try block above
        print(te) #TypeError is probably raised because number is not a number
        exit()
    except ValueError as ve: #this is executed for all ValueErrors in the try block above
        print(ve) #we print the same message as raised in the ValueError above
        exit()
    except:
        print('Error: random() raised an unexpected error') #we print this for all other errors above
        exit()

    return rand #return mxn list of random values between -0.5 and 0.5
